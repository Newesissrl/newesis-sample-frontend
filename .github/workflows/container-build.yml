#
name: Create and publish the Container Image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_dispatch:
  push:
    branches: ['main']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  IMAGE_NAME: ${{ github.repository }}
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  gitversion:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Setup netcore
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x
    - name: Setup gitversion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Determine Version
      id: setVersion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: ${{ github.workspace }}/GitVersion.yml
    - name: Debug gitversion values
      run: |
        echo Major: ${{ env.GitVersion_Major }}
        echo Minor: ${{ env.GitVersion_Minor }}
        echo Patch: ${{ env.GitVersion_Patch }}
        echo PreReleaseTag: ${{ env.GitVersion_PreReleaseTag }}
        echo PreReleaseTagWithDash: ${{ env.GitVersion_PreReleaseTagWithDash }}
        echo PreReleaseLabel: ${{ env.GitVersion_PreReleaseLabel }}
        echo PreReleaseNumber: ${{ env.GitVersion_PreReleaseNumber }}
        echo WeightedPreReleaseNumber: ${{ env.GitVersion_WeightedPreReleaseNumber }}
        echo BuildMetaData: ${{ env.GitVersion_BuildMetaData }}
        echo BuildMetaDataPadded: ${{ env.GitVersion_BuildMetaDataPadded }}
        echo FullBuildMetaData: ${{ env.GitVersion_FullBuildMetaData }}
        echo MajorMinorPatch: ${{ env.GitVersion_MajorMinorPatch }}
        echo SemVer: ${{ env.GitVersion_SemVer }}
        echo LegacySemVer: ${{ env.GitVersion_LegacySemVer }}
        echo LegacySemVerPadded: ${{ env.GitVersion_LegacySemVerPadded }}
        echo AssemblySemVer: ${{ env.GitVersion_AssemblySemVer }}
        echo AssemblySemFileVer: ${{ env.GitVersion_AssemblySemFileVer }}
        echo FullSemVer: ${{ env.GitVersion_FullSemVer }}
        echo InformationalVersion: ${{ env.GitVersion_InformationalVersion }}
        echo BranchName: ${{ env.GitVersion_BranchName }}
        echo EscapedBranchName: ${{ env.GitVersion_EscapedBranchName }}
        echo Sha: ${{ env.GitVersion_Sha }}
        echo ShortSha: ${{ env.GitVersion_ShortSha }}
        echo NuGetVersionV2: ${{ env.GitVersion_NuGetVersionV2 }}
        echo NuGetVersion: ${{ env.GitVersion_NuGetVersion }}
        echo NuGetPreReleaseTagV2: ${{ env.GitVersion_NuGetPreReleaseTagV2 }}
        echo NuGetPreReleaseTag: ${{ env.GitVersion_NuGetPreReleaseTag }}
        echo VersionSourceSha: ${{ env.GitVersion_VersionSourceSha }}
        echo CommitsSinceVersionSource: ${{ env.GitVersion_CommitsSinceVersionSource }}
        echo CommitsSinceVersionSourcePadded: ${{ env.GitVersion_CommitsSinceVersionSourcePadded }}
        echo UncommittedChanges: ${{ env.GitVersion_UncommittedChanges }}
        echo CommitDate: ${{ env.GitVersion_CommitDate }}
    outputs:
      tagVersion: ${{ env.GitVersion_FullSemVer }}
  debugOutput:
    runs-on: ubuntu-latest
    needs: gitversion
    steps:
      - name: Print Output Received
        run: echo ${{ needs.gitversion.outputs.tagVersion }}
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: gitversion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_NAME }}
          username: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ needs.gitversion.outputs.tagVersion }}
  tagRepo:
    runs-on: ubuntu-latest
    needs: [gitversion, build-and-push-image]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: add tag to repo
      run: |
        git tag ${{ needs.gitversion.outputs.tagVersion }}
        git push --tags
