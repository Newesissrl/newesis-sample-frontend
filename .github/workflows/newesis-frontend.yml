name: Create and publishthe Container Image and Deploy to Newesis Frontend
on:
  push:
    branches: ['main']

jobs:

  gitversion:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Setup netcore
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x
    - name: Setup gitversion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Determine Version
      id: setVersion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: ${{ github.workspace }}/GitVersion.yml
    - name: Debug gitversion values
      run: |
        echo Major: ${{ env.GitVersion_Major }}
        echo Minor: ${{ env.GitVersion_Minor }}
        echo Patch: ${{ env.GitVersion_Patch }}
        echo PreReleaseTag: ${{ env.GitVersion_PreReleaseTag }}
        echo PreReleaseTagWithDash: ${{ env.GitVersion_PreReleaseTagWithDash }}
        echo PreReleaseLabel: ${{ env.GitVersion_PreReleaseLabel }}
        echo PreReleaseNumber: ${{ env.GitVersion_PreReleaseNumber }}
        echo WeightedPreReleaseNumber: ${{ env.GitVersion_WeightedPreReleaseNumber }}
        echo BuildMetaData: ${{ env.GitVersion_BuildMetaData }}
        echo BuildMetaDataPadded: ${{ env.GitVersion_BuildMetaDataPadded }}
        echo FullBuildMetaData: ${{ env.GitVersion_FullBuildMetaData }}
        echo MajorMinorPatch: ${{ env.GitVersion_MajorMinorPatch }}
        echo SemVer: ${{ env.GitVersion_SemVer }}
        echo LegacySemVer: ${{ env.GitVersion_LegacySemVer }}
        echo LegacySemVerPadded: ${{ env.GitVersion_LegacySemVerPadded }}
        echo AssemblySemVer: ${{ env.GitVersion_AssemblySemVer }}
        echo AssemblySemFileVer: ${{ env.GitVersion_AssemblySemFileVer }}
        echo FullSemVer: ${{ env.GitVersion_FullSemVer }}
        echo InformationalVersion: ${{ env.GitVersion_InformationalVersion }}
        echo BranchName: ${{ env.GitVersion_BranchName }}
        echo EscapedBranchName: ${{ env.GitVersion_EscapedBranchName }}
        echo Sha: ${{ env.GitVersion_Sha }}
        echo ShortSha: ${{ env.GitVersion_ShortSha }}
        echo NuGetVersionV2: ${{ env.GitVersion_NuGetVersionV2 }}
        echo NuGetVersion: ${{ env.GitVersion_NuGetVersion }}
        echo NuGetPreReleaseTagV2: ${{ env.GitVersion_NuGetPreReleaseTagV2 }}
        echo NuGetPreReleaseTag: ${{ env.GitVersion_NuGetPreReleaseTag }}
        echo VersionSourceSha: ${{ env.GitVersion_VersionSourceSha }}
        echo CommitsSinceVersionSource: ${{ env.GitVersion_CommitsSinceVersionSource }}
        echo CommitsSinceVersionSourcePadded: ${{ env.GitVersion_CommitsSinceVersionSourcePadded }}
        echo UncommittedChanges: ${{ env.GitVersion_UncommittedChanges }}
        echo CommitDate: ${{ env.GitVersion_CommitDate }}
    outputs:
      tagVersion: ${{ env.GitVersion_FullSemVer }}

  build-and-push-image:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: gitversion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.NEWESIS_CONTAINER_REGISTRY_NAME }}
          username: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push Docker image
        run: |
          docker build . -t ${{ env.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.gitversion.outputs.tagVersion }}
          docker push ${{ env.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.gitversion.outputs.tagVersion }}
  tagRepo:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: [gitversion, build-and-push-image]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: add tag to repo
      run: |
        git tag ${{ needs.gitversion.outputs.tagVersion }}
        git push --tags

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [gitversion, build-and-push-image]
    steps:
      - uses: actions/checkout@v3
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
      - name: Bake deployment
        uses: azure/k8s-bake@v2
        with:
          renderEngine: "helm"
          helmChart: ${{ env.CHART_PATH }}
          overrides: |
            sampleFrontend.imageTag:${{ needs.gitversion.outputs.tagVersion }}
            sampleFrontend.image:${{ env.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
          helm-version: "latest"
        id: bake
      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          namespace: ${{ env.DEPLOY_NAMESPACE }}