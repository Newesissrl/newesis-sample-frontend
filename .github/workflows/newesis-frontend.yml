name: Create and publish the Container Image and Deploy to Newesis Cluster
on:
  push:

jobs:

  gitversion:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    if: "!contains(github.event.head_commit.message, '[skip build]')"
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Setup netcore
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x
    - name: Setup gitversion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: 5.x
    - name: Determine Version
      id: setVersion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: ${{ github.workspace }}/GitVersion.yml
    - name: Debug gitversion values
      run: |
        echo Major: ${{ env.GitVersion_Major }}
        echo Minor: ${{ env.GitVersion_Minor }}
        echo Patch: ${{ env.GitVersion_Patch }}
        echo PreReleaseTag: ${{ env.GitVersion_PreReleaseTag }}
        echo PreReleaseTagWithDash: ${{ env.GitVersion_PreReleaseTagWithDash }}
        echo PreReleaseLabel: ${{ env.GitVersion_PreReleaseLabel }}
        echo PreReleaseNumber: ${{ env.GitVersion_PreReleaseNumber }}
        echo WeightedPreReleaseNumber: ${{ env.GitVersion_WeightedPreReleaseNumber }}
        echo BuildMetaData: ${{ env.GitVersion_BuildMetaData }}
        echo BuildMetaDataPadded: ${{ env.GitVersion_BuildMetaDataPadded }}
        echo FullBuildMetaData: ${{ env.GitVersion_FullBuildMetaData }}
        echo MajorMinorPatch: ${{ env.GitVersion_MajorMinorPatch }}
        echo SemVer: ${{ env.GitVersion_SemVer }}
        echo LegacySemVer: ${{ env.GitVersion_LegacySemVer }}
        echo LegacySemVerPadded: ${{ env.GitVersion_LegacySemVerPadded }}
        echo AssemblySemVer: ${{ env.GitVersion_AssemblySemVer }}
        echo AssemblySemFileVer: ${{ env.GitVersion_AssemblySemFileVer }}
        echo FullSemVer: ${{ env.GitVersion_FullSemVer }}
        echo InformationalVersion: ${{ env.GitVersion_InformationalVersion }}
        echo BranchName: ${{ env.GitVersion_BranchName }}
        echo EscapedBranchName: ${{ env.GitVersion_EscapedBranchName }}
        echo Sha: ${{ env.GitVersion_Sha }}
        echo ShortSha: ${{ env.GitVersion_ShortSha }}
        echo NuGetVersionV2: ${{ env.GitVersion_NuGetVersionV2 }}
        echo NuGetVersion: ${{ env.GitVersion_NuGetVersion }}
        echo NuGetPreReleaseTagV2: ${{ env.GitVersion_NuGetPreReleaseTagV2 }}
        echo NuGetPreReleaseTag: ${{ env.GitVersion_NuGetPreReleaseTag }}
        echo VersionSourceSha: ${{ env.GitVersion_VersionSourceSha }}
        echo CommitsSinceVersionSource: ${{ env.GitVersion_CommitsSinceVersionSource }}
        echo CommitsSinceVersionSourcePadded: ${{ env.GitVersion_CommitsSinceVersionSourcePadded }}
        echo UncommittedChanges: ${{ env.GitVersion_UncommittedChanges }}
        echo CommitDate: ${{ env.GitVersion_CommitDate }}
    outputs:
      tagVersion: ${{ env.GitVersion_FullSemVer }}

  build-and-push-image:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: gitversion
    if: "!contains(github.event.head_commit.message, '[skip build]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ vars.NEWESIS_CONTAINER_REGISTRY_NAME }}
          username: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.NEWESIS_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build . -t ${{ vars.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ vars.IMAGE_NAME }}:${{ needs.gitversion.outputs.tagVersion }}
      - name: Push Docker image
        if: "!contains(github.event.head_commit.message, '[skip deploy]') && github.ref == 'refs/heads/main'"
        run: |
          docker push ${{ vars.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ vars.IMAGE_NAME }}:${{ needs.gitversion.outputs.tagVersion }}

  tagRepo:
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: [gitversion, build-and-push-image]
    if: "!contains(github.event.head_commit.message, '[skip deploy]') && github.ref == 'refs/heads/main'"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: add tag to repo
      run: |
        git tag ${{ needs.gitversion.outputs.tagVersion }}
        git push --tags

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: [gitversion, build-and-push-image]
    if: "!contains(github.event.head_commit.message, '[skip deploy]') && github.ref == 'refs/heads/main'"
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
            az aks install-cli
            az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.CLUSTER_NAME }} --admin
            helm dependency build ${{ vars.CHART_PATH }}
            helm upgrade -i -n ${{ vars.DEPLOY_NAMESPACE }} --create-namespace newesis-frontend ${{ vars.CHART_PATH }} --set sampleFrontend.imageTag=${{ needs.gitversion.outputs.tagVersion }},sampleFrontend.image=${{ vars.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ vars.IMAGE_NAME }}

  deployMzingaFE:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: newesis-frontend
    needs: [gitversion, build-and-push-image]
    if: "!contains(github.event.head_commit.message, '[skip deploy]') && github.ref == 'refs/heads/main'"
    steps:
      - uses: actions/checkout@v3
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
            az aks install-cli
            az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.CLUSTER_NAME }} --admin
            helm dependency build ${{ vars.CHART_PATH }}
            helm upgrade -i -n ${{ vars.MZINGA_DEPLOY_NAMESPACE }} --create-namespace mzinga-frontend ${{ vars.CHART_PATH }} --set sampleFrontend.imageTag=${{ needs.gitversion.outputs.tagVersion }},sampleFrontend.image=${{ vars.NEWESIS_CONTAINER_REGISTRY_NAME }}/${{ vars.IMAGE_NAME }},sampleFrontend.hostName="sample-frontend-mzinga.mzinga.io",tenant.name=mzinga,tenant.site.title="Mzinga.io - Your Data API - by Newesis srl",tenant.site.description="Mzinga.io - HeadlessCMS - Backend as a Service",tenant.site.titleSuffix="Mzinga.io by Newesis Srl",tenant.site.topCardList.title="Mzinga.io Product",tenant.site.bottomCardList.title="Mzinga.io Services",tenant.site.topCardList.tag="product",tenant.site.bottomCardList.tag="services"